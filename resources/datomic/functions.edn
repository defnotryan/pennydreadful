[

{:db/id #db/id[:db.part/user]
 :db/ident :append-collection-position
 :db/fn #db/fn
 {:lang "clojure"
  :params [db project-eid collection-eid]
  :code
  [[:db/add
    collection-eid
    :collection/position
    (->> project-eid
         (datomic.api/entity db)
         (:project/collections)
         (map :collection/position)
         (reduce max -1)
         (inc))]]}}

 {:db/id #db/id[:db.part/user]
  :db/ident :append-folder-position-in-collection
  :db/fn #db/fn
  {:lang "clojure"
   :params [db collection-eid folder-eid]
   :code
   [[:db/add
     folder-eid
     :folder/position
     (->> collection-eid
          (datomic.api/entity db)
          :collection/children
          (map #(or (:folder/position %) (:snippet/position %)))
          (reduce max -1)
          (inc))]]}}

 {:db/id #db/id[:db.part/user]
  :db/ident :append-snippet-position-in-collection
  :db/fn #db/fn
  {:lang "clojure"
   :params [db collection-eid snippet-eid]
   :code
   [[:db/add
     snippet-eid
     :snippet/position
     (->> collection-eid
          (datomic.api/entity db)
          :collection/children
          (map #(or (:folder/position %) (:snippet/position %)))
          (reduce max -1)
          (inc))]]}}

 {:db/id #db/id[:db.part/user]
  :db/ident :elide-collection-position
  :db/fn #db/fn
  {:lang "clojure"
   :params [db collection-eid]
   :code
   (map-indexed
     (fn [idx collection-eid]
       [:db/add collection-eid :collection/position idx])
     (->> collection-eid
          (datomic.api/q
           '[:find ?sibling-eid
             :in $ ?collection-eid
             :where [?project-eid :project/collections ?collection-eid]
                    [?project-eid :project/collections ?sibling-eid]]
           db)
          (map first)
          (map (partial datomic.api/entity db))
          (sort-by :collection/position)
          (map :db/id)
          (remove #{collection-eid})))}}

 {:db/id #db/id[:db.part/user]
  :db/ident :move-up-collection-position
  :db/fn #db/fn
  {:lang "clojure"
   :requires [clojure.zip]
   :params [db collection-eid]
   :code
   (map-indexed
    (fn [idx collection-eid]
      [:db/add collection-eid :collection/position idx])
    (let [collection-eids
          (->> collection-eid
               (datomic.api/q
                '[:find ?sibling-eid
                  :in $ ?collection-eid
                  :where [?project-eid :project/collections ?collection-eid]
                         [?project-eid :project/collections ?sibling-eid]]
                db)
               (map first)
               (map (partial datomic.api/entity db))
               (sort-by :collection/position)
               (map :db/id))]
      (if (= collection-eid (first collection-eids))
        collection-eids
        (let [vz (clojure.zip/vector-zip (vec collection-eids))]
          (loop [n (clojure.zip/down vz)]
            (if (= collection-eid (clojure.zip/node n))
              (-> n
                  clojure.zip/remove
                  (clojure.zip/insert-left collection-eid)
                  clojure.zip/root)
              (recur (clojure.zip/next n))))))))}}

 {:db/id #db/id[:db.part/user]
  :db/ident :move-up-folder-position
  :db/fn #db/fn
  {:lang "clojure"
   :requires [clojure.zip]
   :params [db folder-eid]
   :code
   (map-indexed
    (fn [idx {:keys [eid position-key]}]
      [:db/add eid position-key idx])
    (let [coll-children  ;; chidren if parent is collection
          (->> folder-eid
               (datomic.api/q
                '[:find ?sibling-eid
                  :in $ ?folder-eid
                  :where [?collection-eid :collection/children ?folder-eid]
                         [?collection-eid :collection/children ?sibling-eid]]
                db)
               (map first)
               (map (partial datomic.api/entity db))
               (sort-by #(or (:folder/position %) (:snippet/position %))))
          folder-children ;; children if parent is folder
          (->> folder-eid
               (datomic.api/q
                '[:find ?sibling-eid
                  :in $ ?folder-eid
                  :where [?parent-eid :folder/children ?folder-eid]
                         [?parent-eid :folder/children ?sibling-eid]]
                db)
               (map first)
               (map (partial datomic.api/entity db))
               (sort-by #(or (:folder/position %) (:snippet/position %))))
          children (concat coll-children folder-children)]
      (if (= folder-eid (-> children first :db/id))
        (map
         (fn [child]
           {:eid (:db/id child)
            :position-key (if (contains? child :folder/name)
                            :folder/position
                            :snippet/position)})
         children)
        (let [vz (clojure.zip/vector-zip (vec children))]
          (loop [n (clojure.zip/down vz)]
            (if (= folder-eid (-> n clojure.zip/node :db/id))
              (map
               (fn [child]
                 {:eid (:db/id child)
                  :position-key (if (contains? child :folder/name)
                                  :folder/position
                                  :snippet/position)})
               (-> n
                   clojure.zip/remove
                   (clojure.zip/insert-left {:db/id folder-eid :folder/name :dummy})
                   clojure.zip/root))
              (recur (clojure.zip/next n))))))))}}

 {:db/id #db/id[:db.part/user]
  :db/ident :move-down-collection-position
  :db/fn #db/fn
  {:lang "clojure"
   :requires [clojure.zip]
   :params [db collection-eid]
   :code
   (map-indexed
    (fn [idx collection-eid]
      [:db/add collection-eid :collection/position idx])
    (let [collection-eids
          (->> collection-eid
               (datomic.api/q
                '[:find ?sibling-eid
                  :in $ ?collection-eid
                  :where [?project-eid :project/collections ?collection-eid]
                         [?project-eid :project/collections ?sibling-eid]]
                db)
               (map first)
               (map (partial datomic.api/entity db))
               (sort-by :collection/position)
               (map :db/id))]
      (if (= collection-eid (last collection-eids))
        collection-eids
        (let [vz (clojure.zip/vector-zip (vec collection-eids))]
          (loop [n (clojure.zip/down vz)]
            (if (= collection-eid (clojure.zip/node n))
              (-> n
                  clojure.zip/remove
                  clojure.zip/next
                  (clojure.zip/insert-right collection-eid)
                  clojure.zip/root)
              (recur (clojure.zip/next n))))))))}}

{:db/id #db/id[:db.part/user]
 :db/ident :move-down-folder-position
 :db/fn #db/fn
 {:lang "clojure"
  :requires [clojure.zip]
  :params [db folder-eid]
  :code
  (map-indexed
   (fn [idx {:keys [eid position-key]}]
     [:db/add eid position-key idx])
   (let [coll-children
         (->> folder-eid
              (datomic.api/q
               '[:find ?sibling-eid
                 :in $ ?folder-eid
                 :where [?collection-eid :collection/children ?folder-eid]
                        [?collection-eid :collection/children ?sibling-eid]]
               db)
              (map first)
              (map (partial datomic.api/entity db))
              (sort-by #(or (:folder/position %) (:snippet/position %))))
         folder-children
         (->> folder-eid
              (datomic.api/q
               '[:find ?sibling-eid
                 :in $ ?folder-eid
                 :where [?parent-eid :folder/children ?folder-eid]
                        [?parent-eid :folder/children ?sibling-eid]]
               db)
              (map first)
              (map (partial datomic.api/entity db))
              (sort-by #(or (:folder/position %) (:snippet/position %))))
         children (concat coll-children folder-children)]
     (if (= folder-eid (-> children last :db/id))
       (map
        (fn [child]
          {:eid (:db/id child)
           :position-key (if (contains? child :folder/name)
                           :folder/position
                           :snippet/position)})
        children)
       (let [vz (clojure.zip/vector-zip (vec children))]
         (loop [n (clojure.zip/down vz)]
           (if (= folder-eid (-> n clojure.zip/node :db/id))
             (map
              (fn [child]
                {:eid (:db/id child)
                 :position-key (if (contains? child :folder/name)
                                 :folder/position
                                 :snippet/position)})
              (-> n
                  clojure.zip/remove
                  clojure.zip/next
                  (clojure.zip/insert-right {:db/id folder-eid :folder/name :dummy})
                  clojure.zip/root))
             (recur (clojure.zip/next n))))))))}}
 ]
